import streamlit as st
import streamlit.components.v1 as components

import pandas as pd
import numpy as np
import cv2
#from PIL import Image
import matplotlib.pyplot as plt
import time

from sklearn.metrics import classification_report

im_exemple  = 'COVID-1002.png'

title = "Mod√®le de classification"
sidebar_name = "Classification"

facecolor = '#E8F5F8'
edgecolor = '#50B4C8'


def run():

    st.title(title)
    st.markdown(
        """

        ## Objectif

        Dans cette √©tape, nous souhaitons r√©aliser un mod√®le de **classification binaire** de radios thoraciques permettant l'aide √† la d√©tection de cas de COVID-19 (binaire = Non-Covid/Covid).

        ## Echantillon utilis√©

        - Le Dataset est celui pr√©sent√© dans la partie [Data Visualisation]
        - **10.000 images** seront s√©lectionn√©es parmi les 21.165 images disponibles
        - **Equilibrage de l'√©chantillon** de donn√©es pour avoir environ 50% de radiographies COVID et 50% autres cas
        """
        )

       
    # Affichage d'un graphique avant/apr√®s pour montrer le r√©√©quilibrage
    # Chargement des donn√©es 'avant r√©√©quilibrage'
    df_all = pd.read_csv('./streamlit_app/assets/metadata.csv')
    df_tt  = pd.read_csv('./streamlit_app/assets/df_classification_echantillon.csv')

    counts_all = df_all['target'].value_counts(normalize=True).loc[['Normal', 'Lung Opacity', 'Viral Pneumonia', 'COVID']]
    counts_ech = df_tt['target'].value_counts(normalize=True).loc[['Normal', 'Lung Opacity', 'Viral Pneumonia', 'COVID']]
    colors = {'Normal'         : '#3366CC',
              'Lung Opacity'   : '#00B5F7',
              'Viral Pneumonia': '#FF9DA6',
              'COVID'          : '#FB0D0D'}

    bottoms = np.zeros(4)
    
    fig = plt.figure(figsize=(8,5))
    
    for i in ['Viral Pneumonia', 'Lung Opacity', 'Normal', 'COVID']:
    
        bar = plt.bar(x=['Dataset complet\n21.165 images', 'Echantillonnage', 'Echantillon\n10.000 images', 'R√©sultat'],
                      height = [counts_all[i], 0, counts_ech[i], 0],
                      bottom = bottoms,
                      color  = colors[i],
                      label  = i
                     )
        
        plt.bar_label(bar,
                      label_type='center',
                      fmt    = lambda x: (str(int(round(100*x, 0)))) + '%' if x!=0 else '')
        
        plt.fill([0.4, 0.4, 1.6, 1.6],
                 [bottoms[0], counts_all[i]+bottoms[0], counts_ech[i]+bottoms[2], bottoms[2]],
                 facecolor=colors[i],
                 alpha = 0.1,
                 zorder=0,
                 )
        
        plt.text (s=i,
                  x=1,
                  y=(counts_all[i]+counts_ech[i])/4+(bottoms[0]+bottoms[2])/2,
                  color=colors[i],
                  horizontalalignment='center'
                 )
    
        plt.fill([2.4, 2.4, 3.6, 3.6],
                 [bottoms[2], counts_ech[i]+bottoms[2], counts_ech[i]+bottoms[2], bottoms[2]],
                 facecolor = colors[i] if i=='COVID' else 'blue',
                 alpha = 0.1,
                 zorder=0,
                 )
        
        if i=='COVID':
            plt.plot([0.4,1.6, 3.6],
                    [bottoms[0], bottoms[2], bottoms[2]],
                     color=colors[i],
                     zorder=0,
                     linestyle=':',
                     linewidth=1,
                     )
                     
            plt.text (s='COVID\n50%',
                      x=3,
                      y=(counts_ech[i] / 2 +bottoms[2]),
                      color=colors[i],
                      horizontalalignment='center'
                     )
            plt.text (s='non-COVID\n50%',
                      x=3,
                      y=bottoms[2] / 2,
                      color='black',
                      horizontalalignment='center'
                     )
            
        
        bottoms += [counts_all[i], 0, counts_ech[i], 0]
    
    # plt.legend(loc='lower center')
    plt.title('Echantillonage du Dataset avec √©quilibrage COVID/non-COVID', loc='left', fontsize='medium')
    plt.yticks([])
    
    st.pyplot(fig)
    exp_augmentation = st.expander("Afficher la d√©cision")
    with exp_augmentation:
        st.markdown(
            """
            L'√©chantillon est constitu√© de 10.000 images dont 50% COVID. Nous avons donc **besoin de 
5.000 images COVID** pour avoir un √©chantillon √©quilibr√©. Or le dataset n'en **contient que 3.616**. 
Nous avons donc utilis√© plusieurs fois la m√™me image COVID que nous allons modifier en ajoutant au mod√®le
un bloc de data augmentation.""")
        st.success("Ajout d'un bloc d'Augmentation au mod√®le.", icon="‚úÖ")
    

    ##########################################################################
    # Preprocessing
    ##########################################################################
    st.markdown("## Preprocessing")

    # Masquage ###############################################################
    st.markdown("### Preprocessing : Masquage")
    st.markdown("#### Application du masque sur une radio")

    tog_masquage = st.toggle("Segmenter l'image", value=False)
    col1, col2 = st.columns(2)

    if tog_masquage == False:
        with col1:
            st.image('./streamlit_app/assets/classification_masquage_2.png',
                     caption='Radio thoracique annot√©e par un professionnel')
        with col2:
            st.markdown("""Comme le montre l'image ci-contre, la COVID a des effets visibles sur 
la partie inf√©rieure et p√©riph√©rique des poumons.

Les masques fournis dans le dataset devraient a priori inclure ces zones.""")
    else:
        with col1:
            st.image('./streamlit_app/assets/classification_masquage_2_mask.png',
                     caption='Radio thoracique segment√©e')
        with col2:
            st.markdown("""Les masques du dataset excluent de l'image une partie des poumons visiblement touch√©e par la COVID.

Nous supposons que cela peut avoir un impact sur les r√©sultats de notre mod√®le de classification.
""")

    exp_decision = st.expander("A quoi correspond la r√©gion omise ?")
    with exp_decision:
        st.write("""<div class="sketchfab-embed-wrapper"> <iframe title="Adult heart and lung (Animated)" frameborder="0" allowfullscreen mozallowfullscreen="false" webkitallowfullscreen="false" allow="autoplay; fullscreen; xr-spatial-tracking" xr-spatial-tracking execution-while-out-of-viewport execution-while-not-rendered web-share width="670" height="500" src="https://sketchfab.com/models/1e8e022d36084490b9e17b55182b9ce7/embed?autostart=1&camera=0&dnt=1"> </iframe> </div>""", unsafe_allow_html=True)

        st.markdown("""La r√©gion non comprise dans le masque correspond la partie des poumons en contact avec le diaphragme et la 
r√©gion cardiaque. Or les effets de la COVID sont r√©guli√®rement observ√©s dans la r√©gion basse des poumons.""")

        st.success("Nous d√©cidons d'inclure cette r√©gion dans notre segmentation d'image et de mesurer l'impact de cette d√©cision.",
                   icon="‚úÖ")

    st.markdown("#### Comment conserver cette zone dans notre masque ?")
    
    mask_dataset, mask_sans, mask_special = st.tabs(["Radio masqu√©e",
                                                     "Radio non masqu√©e",
                                                     "Radio d√©coup√©e"])
    with mask_dataset:
        col1, col2 = st.columns(2)
        with col1:
            st.image('./streamlit_app/assets/classification_masquages_avec.png', caption='')
        with col2:
            st.markdown("""Avec le masque du **dataset**, la r√©gion pulmonaire qui nous int√©resse est perdue.\n\n
Nous devons trouver un moyen de la conserver.""")

    with mask_sans:
        col1, col2 = st.columns(2)
        with col1:
            st.image('./streamlit_app/assets/classification_masquages_sans.png', caption='')
        with col2:
            st.markdown("Une premi√®re possibilit√© consiste √† conserver l'int√©gralit√© de l'image.")
            st.success("Les zones qui nous int√©ressent sont conserv√©es.", icon='üëç')
            st.error("Le CNN aura acc√®s √† des zones ext√©rieures √† la r√©gion pulmonaire.", icon='üëé')

    with mask_special:
        col1, col2 = st.columns(2)
        with col1:
            st.image('./streamlit_app/assets/classification_masquages_special.png', caption='')
        with col2:
            st.markdown("""Une seconde possibilit√© est d'utiliser le masque de segmentation pour 
d√©couper l'image et conserver les parties basses et cardiaque des poumons.""")
            st.success("""Les zones en dehors de la r√©gion pulmonaire sont exclues.  
Les r√©gions qui nous int√©ressent sont conserv√©es.""", icon='üëç')
            st.error("La trach√©e est √©galement conserv√©e.", icon='üëé')

    
    st.markdown("#### Comment v√©rifier l'impact du masquage ?")
    st.markdown("""Nous d√©cidons d'entra√Æner plusieurs mod√®les et de comparer leurs performances
en utilisant 3 modes de masquages :""")
    st.success("""
 1. sans masque
 2. avec masque du dataset
 3. avec une radio red√©coup√©e pour conserver la r√©gion centrale""", icon='‚úÖ')

    # Recadrage ##############################################################
    st.markdown("### Preprocessing : Recadrage")
    st.markdown("""Apr√®s application du masque, il apparait :
 - beaucoup de place semble perdue sur nos images
 - la position des poumons n'est pas stable et cela pourrait ralentir l'apprentissage de notre CNN.""")
 
    st.markdown("""Nous d√©cidons d'harmoniser les radios en recadrant les images sur la r√©gion
pulmonaire avant redimensionnement en 256x256 pixels.""")

    tog_cadrage = st.toggle("Recadrer les radios", value=False)
    if tog_cadrage == False:
        st.image('./streamlit_app/assets/classification_recadrage_sans.png')
    else:
        st.image('./streamlit_app/assets/classification_recadrage_avec.png')

    st.markdown("#### V√©rifier l'impact du recadrage.")
    st.success("""Nous d√©cidons d'entra√Æner plusieurs mod√®les (avec ou sans recadrage) et de comparer leurs performances.""", icon='‚úÖ')

    # Egalisation ############################################################
    st.markdown("### Preprocessing : Egalisation")
    st.markdown("""Comme vu lors de l'exploration des donn√©es, le contraste et la luminosit√© des radios ne sont 
pas uniformes au sein du dataset. Nous allons donc √©galiser les images pour am√©liorer leur qualit√© et utiliser 
tout le spectre du niveau de gris.  
Nous avons choisi une **√©galisation de type CLAHE**.""")
    exp_exemple = st.expander('Afficher un exemple')
    with exp_exemple:
        st.image('./streamlit_app/assets/classification_egalisation.png')
        st.success("""Apr√®s avoir effectu√© diff√©rents tests sur des CNN et compte tenu des r√©sultats articles consult√©s,
nous avons s√©lectionn√© une √©galisation CLAHE en d√©coupant l'image en tuiles de 8x8.""", icon='‚úÖ')

    # Normalisation ##########################################################
    st.markdown("### Preprocessing : Normalisation")
    st.markdown("""Les images seront normalis√©es avec les fonctions sp√©cifiques aux mod√®les pr√©entra√Æn√©s utilis√©s.
(par exemple pour VGG16 : `tf.keras.applications.vgg16.preprocess_input()`)

En fonction des mod√®les, les couches des images pourront √™tre r√©organis√©es, les valeurs des couleurs recentr√©es 
autour de z√©ro ou encore remises √† l'√©chelle [-1,+1])""") 


    # Sch√©ma de pr√©processing ################################################
    st.markdown("### Pr√©processing : Synth√®se")
    st.image('./streamlit_app/assets/classification_preprocessing.png')
    
    
    ##########################################################################
    # Mod√®le de classification
    ##########################################################################
    st.markdown("""## Le mod√®le de classification

Cr√©ation d'un mod√®le de classification **binaire** : COVID/non COVID.

Utililsation de la technique du **transfer learning** : r√©utilisation d'un mod√®le pr√©-entra√Æn√© pour r√©soudre
un nouveau probl√®me  connexe.""")
    
    # Architercture du mod√®le ################################################
    st.markdown("### Architecture du mod√®le")    
    fig = plt.figure(figsize=(9,3), layout='tight', facecolor=facecolor, edgecolor=edgecolor, linewidth=1)
    plt.imshow(plt.imread('./streamlit_app/assets/classification_modele.png'))
    plt.axis('off')
    plt.title('Structure du mod√®le de classification utilis√©',
              fontdict={'fontsize':'small'},
              loc='left',
              y = -0.15)
    st.pyplot(fig)

    mod_bloc1, mod_bloc2, mod_bloc3 = st.tabs(["Bloc 1 : couches d'augmentations",
                                               "Bloc 2 : mod√®le pr√©entra√Æn√©",
                                               "Bloc 3 : couches de classification"])

    with mod_bloc1:
        st.markdown("""
 - Rotation des images : [-5%, 5%]
 - Zoom : [-5%, 0]
 - D√©placement vertical : [-12.5%, 12.5%]""")

    with mod_bloc2:
        st.markdown("""3 mod√®les pr√©-entra√Æn√©s ont √©t√© test√©s s√©par√©ment :
 - VGG16
 - VGG19
 - Xception

Utilisation du **Finetuning** : les diff√©rentes couches des mod√®les pr√©-entra√Æn√©s ont √©t√© bloqu√©es sauf quelques couches finales.""")
        
        exp_finetuning = st.expander('Afficher le d√©tail du finetuning')
        with exp_finetuning:
            st.write("""
            <table class="myTableStyle" style="width:100%">
            <caption>techniques de Finetuning utilis√©s pour les diff√©rents mod√®les</caption>
            <thead>
                <tr style="">
                    <th>Mod√®le pr√©entra√Æn√© utilis√©</th>
                    <th>Finetuning appliqu√©</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>VGG16</th>
                    <td>
                    Entra√Ænement des couches du mod√®le bloqu√©, sauf :<br>
                    <ul>
                        <li>derni√®re couche de Convolution</li>
                        <li>derni√®re couche de MaxPooling</li>
                    </ul>
                    </td>
                </tr>
                <tr>
                    <th>VGG19</th>
                    <td>
                    Entra√Ænement des couches du mod√®le bloqu√©, sauf :<br>
                    <ul>
                        <li>derni√®re couche de Convolution</li>
                        <li>derni√®re couche de MaxPooling</li>
                    </ul>
                    </td>
                </tr>
                <tr>
                    <th>Xception</th>
                    <td>
                    Entra√Ænement des couches du mod√®le bloqu√©, sauf :<br>
                    <ul>
                        <li>dernier bloc de convolution (block_14, soit 6 couches)</li>
                    </ul>
                    </td>
                </tr>
            </tbody>
            </table>
            <p></p>""", unsafe_allow_html=True)

    with mod_bloc3:    
        st.markdown("""
 - GlobalAveragePooling2D
 - BatchNormalization
 - Dropout(0.5)
 - Dense(512, activation='relu')
 - BatchNormalization
 - Dropout(0.5)
 - Dense(activation='softmax')
 """)
    
    # Param√®tres #############################################################    
    st.markdown("""### Param√®tres de compilation
 - Optimiseur : Adam
 - Fonction de perte : entropie crois√©e cat√©gorielle (sparse categorical cross entropy)
 - M√©trique: accuracy
 """)

    # Entra√Ænement ###########################################################
    st.markdown("""### Entra√Ænement
 - Epoques : 20
 - Fonctions de callback : `EarlyStopping` et `ReduceLROnPlateau`
""")

    btn = st.button("Entra√Æner un mod√®le") 
    
    if btn:
        progress_text = "Entra√Ænement en cours. Veuillez patienter..."
        my_bar = st.progress(0, text=progress_text)
        for percent_complete in np.linspace(0, 100, 10, endpoint=True, dtype='int'):
            time.sleep(0.10)
            my_bar.progress(int(percent_complete), text=progress_text)
        time.sleep(1)
        my_bar.empty()
        
        st.markdown ("Entra√Ænement d'un mod√®le de utilisant du transfert learning √† partir d'un mod√®le VGG16 pr√©entra√Æn√©.")
        st.image('./streamlit_app/assets/classification_entrainement.png')
        time.sleep(0.5)
        st.success("""Au bout de **8** √©poques, l'accuracy sur le jeu de validation est de **92%** 
avec une perte 'sparse categorical cross entropy' de **0.22**.""", icon='‚úÖ')

    
    # Performances des mod√®les ###############################################
    st.markdown("### R√©sultats")
    st.markdown("""18 mod√®les entra√Æn√©s.  
En fonction des mod√®les, l'accuracy varie de **0.81** √† **0.97**.""")

    exp_resultats = st.expander('Afficher le tableau complet')
    with exp_resultats:
        df = pd.read_pickle('./streamlit_app/assets/classification_resultats.pickle')
        df.index = df.index.droplevel(1)
        st.dataframe(df.style.format(precision=2), use_container_width=True)
    


    ###########################################################################
    # Interpr√©tation des r√©sultats
    ###########################################################################
    st.markdown("## Interpr√©tation des r√©sultats")
    
    # Masquage ################################################################
    st.markdown("""### Impact du masquage""")

    col1, col2 = st.columns(2)
    with col1:
        st.dataframe(pd.pivot_table(df, values='Accuracy', index='Masquage', columns='Mod√®le')
                     .sort_values('VGG16', ascending=False)
                     .style.format(precision=2),
                    use_container_width = True)
    with col2:
        st.markdown("Les r√©sultats sans l'utilisation des masques sont nettement meilleurs (+10 pts en moyenne).")

    
    st.markdown("""Pour expliquer pourquoi les r√©sultats varient autant, et comprendre ce qu'utilisent 
    les CNN pour effectuer leur classification, nous allons utiliser la technique du **GradCAM**.""")
    
    mask_sans, mask_poumons, mask_special, mask_dataset = st.tabs(["Sans masque", "Poumons cach√©s", "Masque Sp√©cifique", "Masque du dataset"])
    with mask_sans:
        tog_gradcam_ff = st.toggle('Activer GradCAM', value=False, key='t_ff')
        if tog_gradcam_ff:
            img  = './streamlit_app/assets/classification_gradcam_false_false.png'
            txt  = "**Pr√©diction COVID = 100%**.\n\n"
            txt += "Pour effectuer sa classification, le CNN a utilis√© des informations ext√©rieures √† la zone pulmonaire.\n\n"
            txt += "Ces mod√®les donnent de bons r√©sultats, mais ils sont en r√©alit√© biais√©s.\n\n"
            txt += "**La segmentation et le masquage de l'image semblent indispensables**."
        else:
            img = './streamlit_app/assets/classification_gradcam_image_false_false.png'
            txt = '**Pr√©diction COVID = 100%**'
        col1, col2 = st.columns(2)
        with col1:
            st.image(img)
        with col2:
            st.markdown(txt)
            
    with mask_poumons:
        tog_gradcam_pm = st.toggle('Activer GradCAM', value=True, key='t_pm')
        if tog_gradcam_pm:
            img  = './streamlit_app/assets/classification_gradcam_rectangle-noir.png'
            txt  = "**Pr√©diction COVID = 100%**\n\n"
            txt += "En effet, le mod√®le utilise l'annotation sur la radio."
        else:
            img = './streamlit_app/assets/classification_gradcam_image_rectangle-noir.png'
            txt = '**Pr√©diction COVID = 100%**\n\n'
            txt+= "Avec ce test effectu√© en utilisant le m√™me mod√®le que pr√©c√©demment, on obtient le score √©tonnant de **100%**. \n\n"
            txt+= "Cela confirme que le mod√®le n'utilise pas la r√©gion pulmonaire pour effectuer sa classficiation"
            
        col1, col2 = st.columns(2)
        with col1:
            st.image(img)
        with col2:
            st.markdown(txt)

    with mask_special:
        tog_gradcam_sf = st.toggle('Activer GradCAM', value=True, key='t_sf')
        if tog_gradcam_sf:
            img  = './streamlit_app/assets/classification_gradcam_special_false.png'
            txt  = '**Pr√©diction COVID = 95%**\n\n'
            txt += "Ici, le r√©seau de neurones est contraint de respecter la r√©gion pulmonaire.\n\n"
            txt += "La pr√©diction est r√©alis√©e en utilisant des zones p√©riph√©riques et basses des poumons."
        else:
            img = './streamlit_app/assets/classification_gradcam_image_special_false.png'
            txt = '**Pr√©diction COVID = 95%**'
        col1, col2 = st.columns(2,)
        with col1:
            st.image(img)
        with col2:
            st.markdown(txt)

    with mask_dataset:
        tog_gradcam_tf = st.toggle('Activer GradCAM', value=True, key='t_tf')
        if tog_gradcam_tf:
            img  = './streamlit_app/assets/classification_gradcam_true_false.png'
            txt  = "**Pr√©diction COVID = 65%**\n\n"
            txt += "En activant la gradCAM, on constate que le CNN ne peut plus utiliser la partie basse centrale des poumons "
            txt += "comme il le faisait avec le masque sp√©cifique."
        else:
            img  = './streamlit_app/assets/classification_gradcam_image_true_false.png'
            txt  = "**Pr√©diction COVID = 65%**\n\n"
            txt += "Le taux pr√©dit pour la classe COVID a chut√© : \n"
            txt += "95%->65%."
            
        col1, col2 = st.columns(2,)
        with col1:
            st.image(img)
        with col2:
            st.markdown(txt)

    exp_mask = st.expander('Afficher la conclusion')
    with exp_mask:
        st.success("""Nous pr√©conisons **l'utilisation d'un masque qui conserve les parties basses des poumons**.
C'est d'ailleurs dans cette r√©gion, en plus de la p√©riph√©rie des poumons, 
que des effets de la COVID sont souvent constat√©s.""", icon='‚úÖ')

    # Recadrage ###############################################################
    st.markdown("""### Impact du recadrage""")
    col1, col2 = st.columns(2,)
    with col1:
        st.dataframe(pd.pivot_table(df[df['Masquage']=='Sp√©cifique'], values='Accuracy', index='Recadrage', columns='Mod√®le')
                     .sort_values('VGG16', ascending=True)
                     .style.format(precision=2),
                    use_container_width = True)
    with col2:
        st.markdown("""Le recadrage semble avoir un impact positif sur la pr√©cision (+1 point en moyenne)""")

    exp_mask = st.expander('Afficher la conclusion')
    with exp_mask:
        st.success("""Nous pr√©conisons **un recadrage de l'image** sur la r√©gions masqu√©e.""", icon='‚úÖ')
    

    ###########################################################################
    # S√©lection du meilleur mod√®le
    ###########################################################################
    st.markdown("## S√©lection du meilleur mod√®le")
    st.dataframe(df[(df['Masquage']=='Sp√©cifique')&(df['Recadrage']=='Oui')]
                 .sort_values('Accuracy', ascending=False)
                 .style.format(precision=2),
                use_container_width = True)
    st.markdown("Le mod√®le qui donne les meilleurs r√©sultats est le mod√®le utilisant un mod√®le pr√©entra√Æn√© VGG16.")

    
    st.markdown("### D√©finition du seuil non-COVID / COVID")
    st.image('streamlit_app/assets/classification_performance-ROC.png')
    st.markdown("La valeur de seuil qu permet une s√©paration optimale des cas non COVID des cas COVID est : **0.377**.")
    st.success("""C'est √† partir de ce seuil que le voyant d'alerte COVID passera de vert au rouge 
dans notre application **RadioCovid19**.""", icon='‚úÖ')


    st.markdown("### Matrices de confusion")
    
    probas = pd.read_csv('streamlit_app/assets/classification_tableau-proba.csv')

    tog_normalise = st.toggle('Normaliser', value=True)
    col1, col2 = st.columns(2)

    with col1:
        st.markdown('**Globale**')
        ct = pd.crosstab(probas['true'].replace({0:'Non-covid', 1:'COVID'}),
                         probas['pred'].replace({0:'Non-covid', 1:'COVID'}),
                         rownames=['classes r√©elles :'],
                         colnames=['classes pr√©dites'],
                         normalize='index' if tog_normalise else False)
        # Mise en forme
        ct_styled = ct.style
        ct_styled.format(formatter='{:.0%}' if tog_normalise else None,
                         precision=2)
        ct_styled.apply(styler, axis=0)
        st.write(ct_styled.to_html(), unsafe_allow_html=True)

    with col2:
        st.markdown('**Par pathologie**')
        # Calcule la matrice de confusion
        ct = pd.crosstab(probas['type'],
                         probas['pred'].replace({0:'Non-covid', 1:'COVID'}),
                         rownames=['Type pathologie :'],
                         colnames=['classes pr√©dites'],
                         normalize='index' if tog_normalise else False)
        # Mise en forme
        ct_styled = ct.style
        ct_styled.format(formatter='{:.0%}' if tog_normalise else None,
                         precision=2)
        ct_styled.apply(styler, axis=0)
        st.write(ct_styled.to_html(), unsafe_allow_html=True)

    st.markdown("<div style='padding-bottom: 1rem;'></div>", unsafe_allow_html=True)
    
    exp_matrices = st.expander("Afficher l'interpr√©tation")
    with exp_matrices:
        st.markdown("""La matrice de confusion globale Covid/non-Covid nous montre que la classification est bien g√©r√©e par le mod√®le.
Les r√©sultats sont √©quilibr√©s.

La matrice de confusion d√©taill√©e par pathologie indique que les radios "Viral Pneumonia" sont les moins bien pr√©dites. Cette classe √©tant
minoritaire, il y a peu de cas trait√©s par le mod√®le pendant la phase d'entra√Ænement (274 radios sur 8000 du jeu d'entra√Ænement). 
Pour y rem√©dier, nous aurions pu augmenter le nombre de radios "Viral Pneumonia" de notre jeu d'entra√Ænement et d√©triment des autres pathologies.
""")
    
    
    st.markdown("### Rapport de classification")
    cr = classification_report(probas['true'], probas['pred'], target_names=['non-Covid','Covid'])
    st.markdown(f"""<span></span>
```
.{cr}
```
""", unsafe_allow_html=True)
    

    exp_classreport = st.expander("Afficher l'interpr√©tation")
    with exp_classreport:
        st.markdown("""La **pr√©cision** (capacit√© √† bien classer les cas) est bonne, et le **rappel** (taux de bonne pr√©diction) l'est √©galement.  

Le mod√®le a un taux de bonne pr√©diction satisfaisant (**accuracy**) de 92%.
""")
        st.success("ce mod√®le sera donc celui que nous utiliserons dans notre application finale **RadioCovid19**.", icon='‚úÖ')

    
    st.write("   ")
    st.markdown("---")
    st.markdown("<div style='padding-bottom: 10rem;'></div>", unsafe_allow_html=True)




def styler(serie):
    """ Mise en forme des matrices de confusion
    """
    style = []
    col_name = serie.name
    for (index,value) in serie.to_dict().items():
        if index in ('Lung_Opacity', 'Normal', 'Viral Pneumonia'):
            index = 'Non-covid'
        if index==serie.name:
            style.append('background-color:#e6ffe6; font-weight: bold;')
        else:            
            style.append('background-color:#ffe6e6;')
    return style
    
    
    

    
    

        

            
            
