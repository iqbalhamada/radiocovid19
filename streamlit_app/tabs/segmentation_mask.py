import streamlit as st
import pandas as pd
import numpy as np
import os
from PIL import Image, ImageFilter, ImageStat
import time

import matplotlib.pyplot  as plt
from matplotlib import style
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px


title = "Mod√©lisation pour pr√©diction des masques"
sidebar_name = "Mod√©lisation pour pr√©diction des masques"

#___________________________________________________________________________________________________________________________________
#chargement du dataframe

df=pd.read_csv("data/metadata.csv",index_col=0)

#____________________________________________________________________________________________________________________________________

def run():

    st.title(title)
    st.header("Objectif")
    st.write("""Pr√©dire la r√©gion pulmonaire sur les nouvelles radios thoraciques en vue de la classification binaire COVID/Non-COVID.""")
    st.header("Jeu de donn√©es")
    st.write("""Le jeu de donn√©es √©tant volumineux,nous faisons le choix de le limiter √† un √©chantillon constitu√© d'un nombre optimum d'images.
            """)
    st.markdown(
    "- **6000** images seront s√©lectionn√©es parmi les 21 165 images disponibles\n"
    "- **√âquilibrage de l'√©chantillon** de donn√©es pour avoir environ 50% de radiographies COVID et 50% autres cas"
    )
    if st.button("Justification du choix de la taille de l'√©chantillon"):
        st.image("streamlit_app/assets/segmentation_nb_images.png", caption="Recherche de la taille optimum du jeu d'entra√Ænement")
        st.success("Le nombre d'√©chantillon retenu est 6000 ", icon="‚úÖ")

    if st.button("Afficher la nouvelle r√©partition des donn√©es"):
       
       col1, col2 = st.columns(2)

       with col1:
                
                fig_1 = go.Figure(data=[go.Pie(labels=[ "Normal", "Lung_Opacity","Covid","Viral Pneumonia"], 
                                            values=df["target"].value_counts(),
                                            pull=[0, 0, 0.2, 0],
                                            marker_colors = ['#3366CC','#00B5F7','#FB0D0D','#FF9DA6'])])
                st.plotly_chart(fig_1, use_container_width=True)



       with col2:
                    
                    fig_2 = go.Figure(data=[go.Pie(labels=[ "Covid", "Autres"], 
                                            values=[50,50],
                                            pull=[0, 0, 0.2, 0],
                                            marker_colors = ['#FB0D0D','#00B5F7'])])
                    st.plotly_chart(fig_2, use_container_width=True)
    
    


    st.image("streamlit_app/assets/segmentation_preprocessing.png", caption="Les √©tapes de pr√©processing")
    
    st.header("Mod√©lisation")
    st.markdown("### Architecture U-Net pour la segmentation des images")
    st.image("streamlit_app/assets/segementation_model.png", caption='Mod√®le U-Net construit pour la segmentation des radios')
    


    st.markdown("### Param√®tres de compilation üîß")

    st.markdown(

    "- **Optimiseur**: Adam\n"
    "- **Learning rate**: 0.001\n"
    "- **Fontion de perte**: binary_crossentropy\n"
    "- **M√©trique**: Binary Intersection-Over-Union"
     )
    


    st.header("Analyse de la performance du mod√®le")
    if st.button("Afficher le r√©sultat de l'entrainement"):
       progress_text = "Operation in progress. Please wait."
       my_bar = st.progress(0, text=progress_text)
       for percent_complete in range(100):
          time.sleep(0.01)
          my_bar.progress(percent_complete + 1, text=progress_text)
       time.sleep(1)
       my_bar.empty()
       st.image("streamlit_app/assets/segmentation_performance_du_model.png", caption='Evolution de la m√©trique ‚Äúbinary_IoU‚Äù et de la perte en fonction des √©poques')
       st.success("""Au bout de ***16*** √©poques, le Binary IoU sur le jeu de validation est de ***97%*** avec une perte 'binary_crossentropy'
                   de ***0.022*** """, icon='‚úÖ')

    
    st.header("Pr√©diction")
    st.write("""Les r√©sultats de pr√©dictions sont illustr√©s sur la Figure ci-dessous. La surface de superposition de la
             pr√©diction (en vert) et le masque r√©el (en rouge) est pr√©sent√©e en jaune dans la colonne de droite.""")
    on = st.toggle('Afficher la pr√©diction')

    if on:
        st.image("streamlit_app/assets/segmentation_resultat.png", caption='Comparaison Pr√©diction vs Masque r√©el')
        # st.image("streamlit_app/assets/segmentation_resultat_multiple.png", caption='Exemple2:Comparaison Pr√©diction vs Masque r√©el')
    

    st.write("   ")
    st.markdown("---")
    st.markdown("<div style='padding-bottom: 10rem;'></div>", unsafe_allow_html=True)

  
    
